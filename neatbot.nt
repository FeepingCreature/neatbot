module neatbot;

import std.socket, std.string, std.stream, std.random, std.util, std.process, std.fun, std.getopt;

class Plugin {
  string file;
  Iterator!string input;
  FeedIterator!string output;
  void init(string fn) {
    file = fn;
    output = new FeedIterator!string;
    input = readback(fn, output).splitAt "\n";
  }
  void setup(void delegate(string) addCmd) {
    while auto line <- input {
      if (line == "READY") return;
      if (auto rest = line.startsWith "REGISTER ") {
        addCmd(rest.dup);
      } else {
        raise-error new Error "Invalid command-code in setup phase: $line";
      }
    }
  }
  void process(void delegate(string) sendMesg) {
    while auto line <- input {
      if (line == "READY") return;
      sendMesg(line);
    }
  }
  void writeToPlugin(string data) { output.write "$data\n"; }
  void close() {
    (ReadbackStream: (SplitIterator:input).sup).close();
  }
}

void main(string[] args) {
  string host;
  string nick = "neatbot";
  string channel;
  using new Options {
    addLong(required => true, "host", "h", \(string h) { host = h; });
    addLong("nick", "n", \(string n) { nick = n; });
    addLong(required => true, "channel", "c", \(string c) { channel = c; });
    args = process args;
  }
  auto sock = connect (host, 6667);
  auto rng = getPRNG 23;
  void sendLine(string s) { writeln "> $s"; sock.sendAll byte[]:s; sock.sendAll byte[]:"\r\n"; }
  for auto line <- ["NICK $nick"[],
    "USER $nick $nick $nick $nick $nick"
  ] { sendLine line; }
  auto recv = castIter!string readDg &sock.recv #.splitAt "\r\n";
  
  (string, string, Plugin)[] plugin-registry;
  
  FindResult defined(string s) {
    for (int id, string code) <- zip(0..-1, [for trip <- plugin-registry: trip[1]]) {
      if (s == code) return FindResult:id;
    }
    return FindResult:-1;
  }
  for auto line <- recv {
    writeln "< $line";
    if (line.endsWith ":+i") {
      sendLine "JOIN #$channel";
    }
    if (auto rest = line.startsWith "PING :") sendLine ("PONG :"~rest);
    string[] load-plugin(string plugname) {
      string[] defs;
      using new Plugin (plugname)
        setup \(string s) {
          if (defined(s)) raise-error new Error "While loading $plugname: '$s' already defined";
          plugin-registry ~= (plugname, s, that);
          defs ~= s;
        };
      return defs;
    }
    int unload-plugin(string plugname) {
      auto to-unload = plugin-registry.selectAs \(string name, string, Plugin pl) { if (name != plugname) return Plugin:null; return pl; } #.eval[];
      int sum = to-unload.length;
      for auto pl <- to-unload pl.close();
      to-unload.free;
      
      plugin-registry = plugin-registry.select \(string name, string, Plugin) { return name != plugname; } #.eval[];
      
      return sum;
    }
    void sendMesg(string s) { sendLine "PRIVMSG #$channel :$s"; }
    if (auto rest = line.between("PRIVMSG #$channel :;load", "")) {
      auto plugname = rest.strip();
      if (!plugname.length) {
        sendMesg "Argument expected for ;load! ";
      }else::
      auto defs = load-plugin plugname;
      sendMesg "Defined $defs";
    } else::
    if (auto rest = line.between("PRIVMSG #$channel :;unload", "")) {
      auto plugname = rest.strip();
      if (!plugname.length) {
        sendMesg "Argument expected for ;unload! ";
      }else::
      auto sum = unload-plugin plugname;
      sendMesg "$sum definitions removed.";
    }else::
    if (auto rest = line.between("PRIVMSG #$channel :;reload", "")) {
      auto plugname = rest.strip();
      if (!plugname.length) {
        sendMesg "Argument expected for ;reload! ";
      }else::
      unload-plugin plugname;
      load-plugin plugname;
      sendMesg "$plugname reloaded.";
    }else::
    if (auto rest = line.between("PRIVMSG #$channel :;", "")) {
      auto cmdCode = slice(&rest, " ");
      if (auto pos = defined(cmdCode)) {
        using plugin-registry[pos][2] {
          writeToPlugin(rest);
          process \(string s) { sendMesg s; };
        }
      }
    }
  }
}
